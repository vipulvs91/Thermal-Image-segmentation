Code File for Final Project submission (IE7615_Fall 2020)

----------------------------------------------------------
Thermal Image Segmentation and Annotation
By: Vipul V S
--------------------------------------------------------------------

Data Preprocessing steps
## follow these steps and iterate over training and testing dataset images to pre-process

import cv2
import numpy as np
from matplotlib import pyplot as plt
img = cv2.imread('img22.JPG')
Z = img.reshape((-1,3))
# convert to np.float32
Z = np.float32(Z)
# define criteria, number of clusters(K) and apply kmeans()
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
K = 3
ret,label,center=cv2.kmeans(Z,K,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)
# Now convert back into uint8, and make original image
center = np.uint8(center)
res = center[label.flatten()]
res2 = res.reshape((img.shape))

ret,thresh1 = cv2.threshold(img,157,255,cv2.THRESH_BINARY)
ret,thresh2 = cv2.threshold(res2,157,255,cv2.THRESH_BINARY)
ret,thresh3 = cv2.threshold(thresh2,157,255,cv2.THRESH_BINARY)
ret,thresh4 = cv2.threshold(img,157,255,cv2.THRESH_TOZERO)
ret,thresh5 = cv2.threshold(res2,157,255,cv2.THRESH_TOZERO)
ret,thresh6 = cv2.threshold(thresh5,157,255,cv2.THRESH_TOZERO)

titles = ['Original Image','BINARY threshold','BINARY threshold after kmeans','TOZERO threshold','TOZERO threshold after kmeans']
images = [img, thresh1, thresh2, thresh4, thresh5]

for i in range(5):
    plt.figure(figsize=(20, 20))
    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')
    plt.title(titles[i])
    plt.xticks([]),plt.yticks([])

plt.show()

##using CANNY cv2 method to detect edges
edges = cv2.Canny(thresh5,100,200)
plt.figure(figsize=(80, 80))
plt.subplot(121),plt.imshow(res2,cmap = 'gray')
plt.title('clustered Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(edges,cmap = 'gray')
plt.title('Edge Image after TO_ZERO threshold'), plt.xticks([]), plt.yticks([])

plt.show()
--------------------------------------------------------------------------
Neural Networks implementation
--------------------------------------------------------------------------
#importing necessary libraries

import os
import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm_notebook, tnrange
from itertools import chain
from skimage.io import imread, imshow, concatenate_images
from skimage.transform import resize
from skimage.morphology import label
from sklearn.model_selection import train_test_split
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
from keras.models import Model, load_model
from keras.layers import Input, BatchNormalization, Activation, Dense, Dropout
from keras.layers.pooling import MaxPooling2D, GlobalMaxPool2D
from keras.layers.merge import concatenate, add
from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from keras.optimizers import Adam
from keras.layers.core import Lambda, RepeatVector, Reshape
from keras.layers.convolutional import Conv2D, Conv2DTranspose
---------------------------


# compiling list of images from path
ids = next(os.walk("Thermal Images"))[2] 
print("No. of images = ", len(ids))

# Initializing parameters and reading Original thermal images and Segmented masks from path

im_width = 128
im_height = 128
X = np.zeros((len(ids), im_height, im_width, 1), dtype=np.float32)
y = np.zeros((len(ids), im_height, im_width, 1), dtype=np.float32)
for n, id_ in tqdm_notebook(enumerate(filename), total=len(filename)):
    img = load_img("Thermal Images/"+id_, grayscale=True)
    x_img = img_to_array(img)
    x_img = resize(x_img, (128, 128, 1), mode = 'constant', preserve_range = True)
    mask = img_to_array(load_img("Annotations/"+id_, grayscale=True))
    mask = resize(mask, (128, 128, 1), mode = 'constant', preserve_range = True)
    X[n] = x_img/255.0
    y[n] = mask/255.0

# 70:30 Splitting of training and validation datasets
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=42)

# View image with mask 
ix = random.randint(0, len(X_train))
has_mask = y_train[ix].max() > 0 

fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20, 15))

ax1.imshow(X_train[ix, ..., 0], cmap = 'Spectral', interpolation = 'gaussian')
if has_mask: # if salt
      ax1.contour(y_train[ix].squeeze(), colors = 'k', linewidths = 5, levels = [0.5])
ax1.set_title('Spectral')

ax2.imshow(y_train[ix].squeeze(), cmap = 'gray', interpolation = 'gaussian')
ax2.set_title('binary')


# defining convolutional layers 
def conv2d_block(input_tensor, n_filters, kernel_size = 3, batchnorm = True):
    # Layer2
    x = Conv2D(filters = n_filters, kernel_size = (kernel_size, kernel_size),\
              kernel_initializer = 'he_normal', padding = 'same')(input_tensor)
    if batchnorm:
        x = BatchNormalization()(x)
    x = Activation('relu')(x)
    
    # Layer 2
    x = Conv2D(filters = n_filters, kernel_size = (kernel_size, kernel_size),\
              kernel_initializer = 'he_normal', padding = 'same')(input_tensor)
    if batchnorm:
        x = BatchNormalization()(x)
    x = Activation('relu')(x)
    
    return x 

# Function to define UNet model
def get_unet(input_img, n_filters = 16, dropout = 0.1, batchnorm = True):
    c1 = conv2d_block(input_img, n_filters * 1, kernel_size = 3, batchnorm = batchnorm)
    p1 = MaxPooling2D((2, 2))(c1)
    p1 = Dropout(dropout)(p1)
    
    c2 = conv2d_block(p1, n_filters * 2, kernel_size = 3, batchnorm = batchnorm)
    p2 = MaxPooling2D((2, 2))(c2)
    p2 = Dropout(dropout)(p2)
    
    c3 = conv2d_block(p2, n_filters * 4, kernel_size = 3, batchnorm = batchnorm)
    p3 = MaxPooling2D((2, 2))(c3)
    p3 = Dropout(dropout)(p3)
    
    c4 = conv2d_block(p3, n_filters * 8, kernel_size = 3, batchnorm = batchnorm)
    p4 = MaxPooling2D((2, 2))(c4)
    p4 = Dropout(dropout)(p4)
    
    c5 = conv2d_block(p4, n_filters = n_filters * 16, kernel_size = 3, batchnorm = batchnorm)
    
    u6 = Conv2DTranspose(n_filters * 8, (3, 3), strides = (2, 2), padding = 'same')(c5)
    u6 = concatenate([u6, c4])
    u6 = Dropout(dropout)(u6)
    c6 = conv2d_block(u6, n_filters * 8, kernel_size = 3, batchnorm = batchnorm)
    
    u7 = Conv2DTranspose(n_filters * 4, (3, 3), strides = (2, 2), padding = 'same')(c6)
    u7 = concatenate([u7, c3])
    u7 = Dropout(dropout)(u7)
    c7 = conv2d_block(u7, n_filters * 4, kernel_size = 3, batchnorm = batchnorm)
    
    u8 = Conv2DTranspose(n_filters * 2, (3, 3), strides = (2, 2), padding = 'same')(c7)
    u8 = concatenate([u8, c2])
    u8 = Dropout(dropout)(u8)
    c8 = conv2d_block(u8, n_filters * 2, kernel_size = 3, batchnorm = batchnorm)
    
    u9 = Conv2DTranspose(n_filters * 1, (3, 3), strides = (2, 2), padding = 'same')(c8)
    u9 = concatenate([u9, c1])
    u9 = Dropout(dropout)(u9)
    c9 = conv2d_block(u9, n_filters * 1, kernel_size = 3, batchnorm = batchnorm)
    
    outputs = Conv2D(1, (1, 1), activation='sigmoid')(c9)
    model = Model(inputs=[input_img], outputs=[outputs])
    return model


# Loss optimization using Adam()
input_img = Input((im_height, im_width, 1), name='img')
model = get_unet(input_img, n_filters=16, dropout=0.05, batchnorm=True)
model.compile(optimizer=Adam(), loss="binary_crossentropy", metrics=["accuracy"])

#model.fit
results = model.fit(X_train, y_train, batch_size=32, epochs=100, callbacks=callbacks,\
                    validation_data=(X_valid, y_valid))

# visualizing optimazation curve
plt.title("Optimization curve(Epochs vs Log-loss)")
plt.plot(results.history["loss"], label="loss")
plt.plot(results.history["val_loss"], label="val_loss")
plt.plot( np.argmin(results.history["val_loss"]), np.min(results.history["val_loss"]), marker="x", color="r", label="best model")
plt.xlabel("Epochs")
plt.ylabel("log_loss")
plt.legend()


# Validation
preds_train = model.predict(X_train, verbose=1)
preds_val = model.predict(X_valid, verbose=1)
preds_train_t = (preds_train > 0.5).astype(np.uint8)
preds_val_t = (preds_val > 0.5).astype(np.uint8)

# Plotting results
def plot_sample(X, y, preds, binary_preds, ix=None):
    """Function to plot the results"""
    if ix is None:
        ix = random.randint(0, len(X))

    has_mask = y[ix].max() > 0

    fig, ax = plt.subplots(1, 3, figsize=(20, 10))
    ax[0].imshow(X[ix, ..., 0], cmap='seismic')
    if has_mask:
        ax[0].contour(y[ix].squeeze(), colors='k', levels=[0.7])
    ax[0].set_title('Original image')

    ax[1].imshow(y[ix].squeeze())
    ax[1].set_title('segmented mask')

    ax[2].imshow(preds[ix].squeeze(), vmin=0, vmax=1)
    if has_mask:
        ax[2].contour(y[ix].squeeze(), colors='k', levels=[0.7])
    ax[2].set_title('Predicted segmentation')


#Predictions on training and validation data
plot_sample(X_train, y_train, preds_train, preds_train_t)
plot_sample(X_valid, y_valid, preds_val, preds_val_t)
















